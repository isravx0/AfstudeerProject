import React, { useState } from 'react';
import ChatBot from 'react-chatbotify';

// Sample FAQ data (for example, for Solar Panels, Battery, and Simulator)
const faqData = {
    "battery": {
        "how it works": "The battery stores energy generated by the solar panels and can be used when needed.",
        "maintenance": "To maintain the battery, ensure that it is kept clean and check its charge regularly."
    },
    "solar panel": {
        "energy generation": "Solar panels generate energy by converting sunlight into electricity through photovoltaic cells.",
        "optimization tips": "To optimize solar panel efficiency, ensure they are cleaned regularly and positioned in direct sunlight."
    },
    "simulator": {
        "energy estimation": "The simulator estimates the energy based on your location, panel size, and other environmental factors.",
        "result interpretation": "Results from the simulator can be interpreted by checking energy output, estimated savings, and efficiency."
    }
};

const MyChatBot = () => {
    const [clientInfo, setClientInfo] = useState({});

    // Email validation regex
    const validateEmail = (email) => {
        const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return regex.test(email);
    };

    // Define the sendEmail function to send email to backend
    const sendEmail = async (params) => {
        const { name, email, topic } = clientInfo;
        const question = params.userInput;

        // Prepare the payload
        const payload = {
            name: name || "Customer",  // Use default name if not provided
            email,
            topic,
            question,
        };

        try {
            // Send the email to your backend API
            const response = await fetch("http://localhost:3000/api/send-support-email", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(payload),
            });

            if (!response.ok) {
                throw new Error("Failed to send email.");
            }

            // On success, send this message to the user
            return `Thank you, ${name || "customer"}! Your message has been sent to our support team. We'll contact you soon.`;
        } catch (error) {
            console.error("Error sending email:", error);
            return "Sorry, there was an error sending your message. Please try again later.";
        }
    };

    const flow = {
        start: {
            message: "Hello! Before we proceed, can I have your email address?",
            path: "get_email"
        },
        get_email: {
            message: "Please provide your email address so we can contact you if needed.",
            path: "validate_email"
        },
        validate_email: {
            message: async (params) => {
                const email = params.userInput;
                if (!email || !validateEmail(email)) {
                    return "Please provide a valid email address.";
                }

                setClientInfo(prevInfo => ({ ...prevInfo, email }));
                return "Thanks! Now, let's proceed. What would you like to know about? (Battery, Solar Panel, Simulator, or Other)";
            },
            path: "choose_topic"
        },
        choose_topic: {
            message: "Please choose a topic to learn about:",
            options: ["Battery", "Solar Panel", "Simulator", "Other"],
            path: (params) => {
                const topic = params.userInput.toLowerCase();
                if (topic === "battery") {
                    setClientInfo(prevInfo => ({ ...prevInfo, topic: "battery" }));
                    return "battery_question";
                }
                if (topic === "solar panel") {
                    setClientInfo(prevInfo => ({ ...prevInfo, topic: "solar panel" }));
                    return "solar_question";
                }
                if (topic === "simulator") {
                    setClientInfo(prevInfo => ({ ...prevInfo, topic: "simulator" }));
                    return "simulator_question";
                }
                return "other_question";
            }
        },
        battery_question: {
            message: "Would you like to know how the battery works or how to maintain it?",
            options: ["How it works", "Maintenance"],
            path: "provide_faq_answer"
        },
        solar_question: {
            message: "Do you want to know how solar panels generate energy or how to optimize them?",
            options: ["Energy generation", "Optimization tips"],
            path: "provide_faq_answer"
        },
        simulator_question: {
            message: "Would you like to know how the simulator estimates energy or how to interpret the results?",
            options: ["Energy estimation", "Result interpretation"],
            path: "provide_faq_answer"
        },
        other_question: {
            message: "Please briefly describe your question, and I'll try to help!",
            path: "need_more_help"
        },
        provide_faq_answer: {
            message: (params) => {
                const { topic } = clientInfo;
                const userChoice = params.userInput.toLowerCase();

                if (faqData[topic][userChoice]) {
                    return faqData[topic][userChoice];
                }
                return "I'm sorry, I don't have an answer to that question right now.";
            },
            path: "need_more_help"
        },
        need_more_help: {
            message: "Is there anything else I can help you with?",
            options: ["Yes, contact support", "No, I'm good"],
            path: (params) => params.userInput.toLowerCase() === "yes, contact support" ? "get_question_details" : "thank_user"
        },
        get_question_details: {
            message: "Please explain your question in detail.",
            path: "send_email"
        },
        send_email: {
            message: async (params) => {
                const { name, email, topic } = clientInfo;

                // Send the email request to backend
                return await sendEmail(params);
            },
            path: "thank_user"
        },
        thank_user: {
            message: "Thank you for reaching out! Have a great day!",
            path: null // End the conversation
        },
        end: {
            message: "Thank you for visiting. Feel free to come back if you have more questions!",
            path: null // End the conversation
        }
    };

    return (
        <div className="chatbot-container">
            <ChatBot 
                settings={{
                    general: { embedded: true }, 
                    chatHistory: { storageKey: "solar_assistant" },
                }} 
                flow={flow}
            />
        </div>
    );
};

export default MyChatBot;
